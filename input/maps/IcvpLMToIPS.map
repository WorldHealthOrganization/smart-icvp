map "http://worldhealthorganization.github.io/smart-icvp/StructureMap/IcvpLMToIPS" = "IcvpLMToIPS"
uses "http://worldhealthorganization.github.io/smart/StructureDefinition/ModelICVP" alias ICVPLogicalModel as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias IPS as target


// create Bundle
group IcvpLMToIPS(source lm : ICVPLogicalModel, target ips : IPS) {
  lm -> ips.type = 'document' "set ips type";
  lm -> uuid() as bid, ips.id = bid "set id";
  lm -> (now()) as timestamp,uuid() as cid, uuid() as pid, uuid() as prid, uuid() as oid then {  
    lm -> ips.timestamp = timestamp "set timestamp";
    lm -> ips.entry as entry,  entry.resource = create('Composition') as composition,  entry.fullUrl = append('urn:uuid:', cid) then {
        lm -> lm then LmToComposition(lm, composition,  timestamp,cid,  pid,  prid,  oid ) "set";
        lm -> ips.entry as entry, entry.fullUrl = append('urn:uuid:', pid), create('Patient') as patient then {
            lm -> lm then DemographicsToPatient(lm, patient, pid) "create patient";
            lm -> entry.resource = patient "set patient as entry";
        } "map patient resource";
   /*     lm -> ips.entry as entry, entry.fullUrl = append('urn:uuid:', prid), create('Practitioner') as practitioner then {
            lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToPractitioner(reportingSource, practitioner, prid) "create practitioner";
            lm -> entry.resource = practitioner "set practitioner as entry";
        } "map practitioner resource" ;
        lm -> ips.entry as entry, entry.fullUrl = append('urn:uuid:', oid), create('Organization') as organization then {
            lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToOrganization(reportingSource, organization, oid) "create organization";
            lm -> entry.resource = organization "set organization as entry";
        } "map organization resource"; */
    } "map composition resource";
  } "set entries" ;
}

// create Composition
group LmToComposition(source lm : ICVPLogicalModel, target composition : Composition,source timestamp, source cid, source pid, source prid, source oid) {
  cid -> composition.id = cid "set id";
  lm -> composition.status = "final" "set status";
  timestamp -> composition.date = timestamp "set composition date";
  lm -> composition.title = "International Patient Summary" "set title";
  lm -> create('Coding') as coding, coding.code = "60591-5", coding.system = "http://loinc.org", create('CodeableConcept') as code, code.coding = coding,  composition.type = code "set type";
  lm -> composition.subject as subject then {
    lm -> subject.reference= append('Patient/',pid) "set subject";
  } "set subject";
}

// create Patient
group DemographicsToPatient(source lm:ICVPLogicalModel , target patient: Patient, source pid) {
 pid -> patient.id = pid "set patient id";
 lm.name as sourceName -> patient.name as targetName then {
  sourceName -> sourceName then humanNameToHumanName(sourceName, targetName) "Copy name";
 } "Set name";
 lm.dob as dob -> patient.birthDate = dob "set date of birth";
 lm.sex as sex -> patient.gender = sex "set sex";
 lm.nid as id -> patient.identifier as identifier, identifier.value = id "set national identifier";
 lm.guardian as guardian -> patient.contact as parentContact, parentContact.name as parentName then {
  guardian -> guardian then humanNameToHumanName(guardian, parentName) "copy name";
 } "set guardian name";
}

// create author


// create sectionMedications
group createSectionMedications(source lm:ICVPLogicalModel, target med : BackboneElement, source mid ) {
mid -> med.id = mid "set medication id";
lm -> med.title = "Medication Summary Section" "set medication title";
lm -> create('Coding') as coding, coding.code = "10160-0", coding.system = "http://loinc.org", create('CodeableConcept') as code, code.coding = coding,  med.code = code "set code";

}

// create sectionAllergies

// create sectionProblems

// create sectionImmunizations
//helper function
group humanNameToHumanName (source sourceName, target targetName: HumanName) {
  sourceName.use as use -> targetName.use = use "Copy use";
  sourceName.text as text -> targetName.text = text "Copy text";
  sourceName.family as family -> targetName.family = family "Copy family";
  sourceName.given as given -> targetName.given = given "Copy given";
  sourceName.prefix as prefix -> targetName.prefix = prefix "Copy prefix";
  sourceName.suffix as suffix -> targetName.suffix = suffix "Copy suffix";
  
  // Copy the period using the previously defined group function
  sourceName.period as sourcePeriod -> targetName.period as targetPeriod then {
    sourcePeriod -> sourcePeriod then periodToPeriod(sourcePeriod, targetPeriod) "Copy period";
  } "copy period";
}