map "http://smart.who.int/icvp/StructureMap/IcvpLMToIPS" = "IcvpLMToIPS"
uses "http://worldhealthorganization.github.io/smart/StructureDefinition/ModelICVP" alias ICVPLogicalModel as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias IPS as target


// create Bundle
group IcvpLMToIPS(source lm : ICVPLogicalModel, target ips : IPS) {
  lm -> ips.type = 'document' "setIPSType";
  lm -> uuid() as bid, ips.id = bid "setId";
  lm -> (now()) as timestamp,uuid() as cid, uuid() as pid, uuid() as prid, uuid() as oid, uuid() as mid, uuid() as aid, uuid() as proid, uuid() as immid then {  
    lm -> ips.timestamp = timestamp "setBundleTimestamp";
    lm -> ips.entry as entry,  entry.resource = create('Composition') as composition,  entry.fullUrl = append('urn:uuid:', cid) then {
        lm -> lm then LmToComposition(lm, ips, composition,  timestamp,cid,  pid,  prid,  oid, mid, aid, proid, immid ) "set";
        lm -> ips.entry as entry, entry.fullUrl = append('urn:uuid:', pid), create('Patient') as patient then {
            lm -> lm then DemographicsToPatient(lm, patient, pid) "createPatient";
            lm -> entry.resource = patient "setPatientEntry";
        } "mapPatientResource";
   /*     lm -> ips.entry as entry, entry.fullUrl = append('urn:uuid:', prid), create('Practitioner') as practitioner then {
            lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToPractitioner(reportingSource, practitioner, prid) "createPractitioner";
            lm -> entry.resource = practitioner "setPractitionerEntry";
        } "mapPractitionerResource" ;
        lm -> ips.entry as entry, entry.fullUrl = append('urn:uuid:', oid), create('Organization') as organization then {
            lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToOrganization(reportingSource, organization, oid) "createOrganization";
            lm -> entry.resource = organization "setOrganizationEntry";
        } "map organization resource"; */
    } "mapCompositionResource";
  } "setEntries" ;
}

// create Composition
group LmToComposition(source lm : ICVPLogicalModel, target ips : Bundle, target composition : Composition,source timestamp, source cid, source pid, source prid, source oid, source mid, source aid, source proid, source immid) {
  cid -> composition.id = cid "setCid";
  lm -> composition.status = "final" "setStatus";
  timestamp -> composition.date = timestamp "setCompositionDate";
  lm -> composition.title = "International Patient Summary" "setTitle";
  lm -> create('Coding') as coding, coding.code = "60591-5", coding.system = "http://loinc.org", create('CodeableConcept') as code, code.coding = coding,  composition.type = code "setType";
  lm -> composition.subject as subject then {
    lm -> subject.reference= append('Patient/',pid) "setSubject";
  } "setSubject";
  lm -> composition.section as medication then createSectionMedications(lm, medication, mid) "createMedication";
  lm -> composition.section as allergies then createSectionAllergies(lm, allergies, aid) "createAllergies";
  lm -> composition.section as problems then createSectionProblems(lm, problems, proid) "createProblems";
  lm then createSectionImmunizations(lm, ips, composition, immid, pid) "createImmunizations";
}

// create Patient
group DemographicsToPatient(source lm:ICVPLogicalModel , target patient: Patient, source pid) {
 pid -> patient.id = pid "setPatientId";
 lm.name as sourceName -> patient.name as targetName then {
  sourceName -> sourceName then humanNameToHumanName(sourceName, targetName) "CopyName";
 } "Set name";
 lm.dob as dob -> patient.birthDate = dob "setDateofBirth";
 lm.sex as sex -> patient.gender = sex "setSex";
 lm.nid as id -> patient.identifier as identifier, identifier.value = id "setNationalIdentifier";
 lm.guardian as guardian -> patient.contact as parentContact, parentContact.name as parentName then {
  guardian -> guardian then humanNameToHumanName(guardian, parentName) "copyName";
 } "setGuardianName";
}

// create author


// create sectionMedications
group createSectionMedications(source lm:ICVPLogicalModel, target med : BackboneElement, source mid ) {
mid -> med.id = mid "set medication id";
lm -> med.title = "Medication Summary Section" "setMedicationTitle";
lm -> create('Coding') as coding, coding.code = "10160-0", coding.system = "http://loinc.org", create('CodeableConcept') as code, code.coding = coding,  med.code = code "setCode";
lm -> create('Coding') as coding, coding.code = "unavailable", coding.system = "http://hl7.org/fhir/ValueSet/list-empty-reason", create('CodeableConcept') as code, code.coding = coding,  med.emptyReason = code "setCode";
}

// create sectionAllergies
group createSectionAllergies(source lm:ICVPLogicalModel, target all : BackboneElement, source aid ) {
aid -> all.id = aid "setAllergyId";
lm -> all.title = "Allergies Section" "setAllergyTitle";
lm -> create('Coding') as coding, coding.code = "48765-2", coding.system = "http://loinc.org", create('CodeableConcept') as code, code.coding = coding,  all.code = code "setCode";
lm -> create('Coding') as coding, coding.code = "unavailable", coding.system = "http://hl7.org/fhir/ValueSet/list-empty-reason", create('CodeableConcept') as code, code.coding = coding,  all.emptyReason = code "setCode";
}

// create sectionProblems
group createSectionProblems(source lm:ICVPLogicalModel, target prb : BackboneElement, source proid ) {
proid -> prb.id = proid "setProblemsId";
lm -> prb.title = "Problems Section" "setProblemTitle";
lm -> create('Coding') as coding, coding.code = "11450-4", coding.system = "http://loinc.org", create('CodeableConcept') as code, code.coding = coding,  prb.code = code "setCode";
lm -> create('Coding') as coding, coding.code = "unavailable", coding.system = "http://hl7.org/fhir/ValueSet/list-empty-reason", create('CodeableConcept') as code, code.coding = coding,  prb.emptyReason = code "setCode";
}

// create sectionImmunizations
group createSectionImmunizations(source lm:ICVPLogicalModel, target bundle: Bundle, target composition: Composition, source immid, source pid ) {
lm -> composition.section as imm then {
  immid -> imm.id = immid "setImmunizationsId";
  lm -> imm.title = "Immunizations Section" "setImmunizationTitle";
  lm -> create('Coding') as coding, coding.code = "11369-6", coding.system = "http://loinc.org", create('CodeableConcept') as code, code.coding = coding,  imm.code = code "setCode";
  lm.vaccineDetails as vax -> uuid() as id, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', id), imm.entry as sectionEntry, sectionEntry.reference = append('Immunization/', id), entry.resource = create('Immunization') as immunization , immunization.id = id then createImmunizationResource(vax, immunization, pid ) "setImmz";
  } "set";
}

group createImmunizationResource (source vax : vaccineDetails, target immunization : Immunization, source pid) {
    vax -> immunization.status = "completed" "setStatus";
    vax.vaccineClassification as vaccine -> immunization.vaccineCode = vaccine "set vaccine code";
    //vax.date as date -> immunization.occurrenceDateTime = date "setDate";
    vax.batchNo as batchNo -> immunization.lotNumber = batchNo "setBatchNo";
    vax -> immunization.protocolApplied as protocol then {
      vax.doseNumber as doseNo then {
        doseNo.text as text -> protocol.doseNumberString = text "setDoseNo";
      } "setDoseNo";
    /*  vax.disease as disease -> create('Coding') as coding, coding = disease, create('CodeableConcept') as code, code.coding = coding,  protocol.targetDisease = code "setTargetDisease"; */
    } "setProtocolApplied";
    vax -> immunization.patient as subject, subject.reference = append('Patient/',pid) "setSubject";
  
}

//helper function
group humanNameToHumanName (source sourceName, target targetName: HumanName) {
  sourceName.use as use -> targetName.use = use "CopyUse";
  sourceName.text as text -> targetName.text = text "CopyText";
  sourceName.family as family -> targetName.family = family "CopyFamily";
  sourceName.given as given -> targetName.given = given "CopyGiven";
  sourceName.prefix as prefix -> targetName.prefix = prefix "CopyPrefix";
  sourceName.suffix as suffix -> targetName.suffix = suffix "CopySuffix";
  
  // Copy the period using the previously defined group function
  sourceName.period as sourcePeriod -> targetName.period as targetPeriod then {
    sourcePeriod -> sourcePeriod then periodToPeriod(sourcePeriod, targetPeriod) "CopyPeriod";
  } "copyPeriod";
}