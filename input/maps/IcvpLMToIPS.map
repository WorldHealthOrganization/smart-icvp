map "http://worldhealthorganization.github.io/smart-icvp/StructureMap/IcvpLMToIPS" = "IcvpLMToIPS"
uses "http://worldhealthorganization.github.io/smart-icvp/StructureDefinition/ModelICVP" alias ICVPLogicalModel as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias IPS as target



group IcvpLMToIPS(source lm : ICVPLogicalModel, target ips : IPS) {
  lm -> ips.type = 'document' "set ips type";
  lm -> uuid() as bid, ips.id = bid "set id";
//  lm -> dateTime() as timestamp, ips.timestamp = timestamp "set timestamp";
  lm -> uuid() as cid, uuid() as pid, uuid() as prid, uuid() as oid then {  
    lm -> bundle.entry as entry,  entry.resource = create('Composition') as composition,  entry.fullUrl = append('urn:uuid:', cid) then {
        lm -> lm then LmToComposition(lm, composition,  cid,  pid,  prid,  oid ) "set";
        lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', pid), create('Patient') as patient then {
            lm -> lm then DemographicsToPatient(lm, patient, pid) "create patient";
            lm -> entry.resource = patient "set patient as entry";
        } "map patient resource";
   /*     lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', prid), create('Practitioner') as practitioner then {
            lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToPractitioner(reportingSource, practitioner, prid) "create practitioner";
            lm -> entry.resource = practitioner "set practitioner as entry";
        } "map practitioner resource" ;
        lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', oid), create('Organization') as organization then {
            lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToOrganization(reportingSource, organization, oid) "create organization";
            lm -> entry.resource = organization "set organization as entry";
        } "map organization resource"; */
    } "map composition resource";
  } "set entries" ;
}

group LmToComposition(source lm : ICVPLogicalModel, target composition : Composition, source cid, source pid, source prid, source oid, source eid) {
  cid -> composition.id = cid "set id";
  lm -> composition.status = "final" "set status";
  lm -> composition.title = "International Patient Summary" "set title";
  lm -> create('Coding') as coding, coding.code = "60591-5", coding.system = "http://loinc.org", create('CodeableConcept') as code, code.coding = coding,  composition.type = code "set type";
  lm -> composition.subject as subject then {
    lm -> subject.reference= append('Patient/',pid) "set subject";
  } "set subject";/*
  lm -> composition.author as practitioner then {
    lm -> practitioner.reference = append('Practitioner/', prid) "set author practitioner";
  } "set author practitioner";
  lm -> composition.author as institution then {
    lm -> institution.reference = append('Organization/', oid) "set author institution";
  } "set author org"; */
}


group DemographicsToPatient(source lm:ICVPLogicalModel , target patient: Patient, source pid) {
 pid -> patient.id = pid "set patient id";
 lm.name as sourceName -> patient.name as targetName then {
  sourceName -> sourceName then humanNameToHumanName(sourceName, targetName) "Copy name";
 } "Set name";
 lm.dob as dob -> patient.birthDate = dob "set date of birth";
 lm.sex as sex -> patient.gender = sex "set sex";
}

/*

group ReportingSourceToPractitioner (source reportingSource: ReportingSourceLogicalModel, target practitioner: Practitioner, source prid) {
prid -> practitioner.id = prid "set id";
reportingSource.ReportedBy as name -> practitioner.name as humanName, humanName.text = name "set name";
}

group ReportingSourceToOrganization (source reportingSource: ReportingSourceLogicalModel, target organization: Organization, source oid) {
oid -> organization.id = oid "set id";
reportingSource.HealthServiceName as name -> organization.name = name "set name";
reportingSource.HealthServiceTelephone as phoneSource -> organization.contact as contactDetails, contactDetails.telecom as phoneTarget then {
  phoneSource -> phoneSource then contactPointToContactPoint(phoneSource, phoneTarget) "set org contact"; 
} "set phone";

reportingSource.PlaceOfReporting as locationSource -> organization.contact as contactDetails, contactDetails.address as locationTarget then {
  locationSource -> locationSource then contactPointToContactPoint(locationSource, locationTarget) "set org address"; 
} "set address";

}
*/